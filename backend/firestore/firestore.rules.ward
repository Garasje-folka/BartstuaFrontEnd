rules_version = '2';

type DateHour = {
  hour: int,
  year: int,
  month: int,
  day: int,
}

type EventData = {
  spacesTaken: int,
  date: DateHour,
}

type BookingData = {
  date: DateHour,
  spaces: int,
  uid: string,
}

function maximumAvailableSpaces() {
  return 10;
}

function isAuthenticated() { 
  let a = request.auth;
  return a!=null; 
}

function isRequestedByCurrentUser() { 
  return resource.data.uid == request.auth.uid
}

function isEventSpacesAvailable(spaces, eventId) {
  return (spaces <= maximumAvailableSpaces())
  && (
    (!exist(/databases/$(database)/documents/events/$(eventId)))
    || 
    (
      ((get(/databases/$(database)/documents/events/$(eventId)).data.spacesTaken + spaces) <= maximumAvailableSpaces())
    )
  )
}

function dataContainsUid(bookingId) { 
  return request.resource.data.uid == request.auth.uid
}

//match /{document=**} {
//    allow read, write: if true;
//}
match /events/{eventDoc} is EventData{
  allow read: true;
}
match /bookings/{bookingDoc} is BookingData {
  allow read: isRequestedByCurrentUser();
  allow create: dataContainsUid(bookingDoc) 
  //&& isEventSpacesAvailable(request.data.spaces, bookingDoc);
}

match /reservations/{reservationDoc} is BookingData {
  allow read: isRequestedByCurrentUser();
  allow create: dataContainsUid(reservationDoc) 
  //&& isEventSpacesAvailable(request.data.spaces, bookingDoc);
}


